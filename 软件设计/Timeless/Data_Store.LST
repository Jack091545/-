C51 COMPILER V9.01   DATA_STORE                                                            05/01/2016 22:02:26 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DATA_STORE
OBJECT MODULE PLACED IN Data_Store.OBJ
COMPILER INVOKED BY: D:\software\KEILC51\C51\BIN\C51.EXE Data_Store.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "stc12c5a60s2.h"
   2          #include "Data_Store.h"
   3          #include "UART.h"
   4          #include<intrins.h>
   5          
   6          
   7          #define CMD_IDLE 0
   8          #define CMD_READ 1
   9          #define CMD_PROGRAM 2
  10          #define CMD_ERASE 3
  11          
  12          #define ENABLE_IAP 0x83
  13          
  14          #define IAP_ADDRESS_SEC1 0x0000
  15          #define IAP_ADDRESS_SEC2 0x0200
  16          
  17          struct Private_Data
  18          {
  19                  unsigned char Account[20];
  20                  unsigned char Passwd[20]; 
  21          };
  22          
  23          static unsigned char Boot_Flag = 0;
  24          
  25          
  26          void Delay(unsigned char n)
  27          {
  28   1              unsigned int x;
  29   1              while(n--)
  30   1              {
  31   2                      x = 0;
  32   2                      while(++x);
  33   2              }
  34   1      }
  35          
  36          void IAP_Idle(void)
  37          {
  38   1              IAP_CONTR = 0;
  39   1              IAP_CMD = 0;
  40   1              IAP_TRIG = 0;
  41   1              IAP_ADDRH = 0x80;
  42   1              IAP_ADDRL = 0x00;
  43   1      }
  44          
  45          unsigned char IAP_ReadByte(unsigned int addr)
  46          {
  47   1              unsigned char dat;
  48   1      
  49   1              IAP_CONTR = ENABLE_IAP;
  50   1              IAP_CMD = CMD_READ;
  51   1              IAP_ADDRL = addr;
  52   1              IAP_ADDRH = addr >> 8;
  53   1              IAP_TRIG = 0x5A;
  54   1              IAP_TRIG = 0XA5;
  55   1              _nop_();
C51 COMPILER V9.01   DATA_STORE                                                            05/01/2016 22:02:26 PAGE 2   

  56   1      
  57   1              dat = IAP_DATA;
  58   1              IAP_Idle();
  59   1      
  60   1              return dat;
  61   1      }
  62          
  63          
  64          void IAP_ProgramByte(unsigned int addr,unsigned char dat)
  65          {
  66   1              IAP_CONTR = ENABLE_IAP;
  67   1              IAP_CMD = CMD_PROGRAM;
  68   1              IAP_ADDRL = addr;
  69   1              IAP_ADDRH = addr >> 8;
  70   1              IAP_DATA = dat;
  71   1              IAP_TRIG = 0x5A;
  72   1              IAP_TRIG = 0XA5;
  73   1              _nop_();
  74   1      
  75   1      
  76   1              IAP_Idle();     
  77   1      }
  78          
  79          void IAP_EraseSector(unsigned int addr)
  80          {
  81   1              IAP_CONTR = ENABLE_IAP;
  82   1              IAP_CMD = CMD_ERASE;
  83   1              IAP_ADDRL = addr;
  84   1              IAP_ADDRH = addr >> 8;
  85   1              IAP_TRIG = 0x5A;
  86   1              IAP_TRIG = 0XA5;
  87   1              _nop_();
  88   1      
  89   1              IAP_Idle();             
  90   1      }
  91          
  92          
  93          unsigned char Get_Boot_Flag(void)
  94          {
  95   1              return Boot_Flag;
  96   1      }
  97          
  98          unsigned int Get_Timeless(void)
  99          {
 100   1              return (IAP_ReadByte(IAP_ADDRESS_SEC1+2)<<8)|(IAP_ReadByte(IAP_ADDRESS_SEC1+3)) ;
 101   1      }
 102          
 103          void Set_Timeless(unsigned int data_Time)
 104          {
 105   1              IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
 106   1              Delay(10);
 107   1      
 108   1              IAP_ProgramByte(IAP_ADDRESS_SEC1,0x55);
 109   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+1,0xAA);
 110   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+2,data_Time&0xff00);
 111   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+3,data_Time&0x00ff);           
 112   1      }
 113          
 114          void IAP_Task(void)
 115          {
 116   1      
 117   1      #ifdef __DEBUG__
C51 COMPILER V9.01   DATA_STORE                                                            05/01/2016 22:02:26 PAGE 3   

                      IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
                      Delay(10);
                      IAP_EraseSector(IAP_ADDRESS_SEC2); //²Á³ýÉÈÇø2
                      Delay(10);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1,0x55);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1+1,0xAA);
                      Delay(10);
              #endif
 126   1      #ifdef __WEI__
                      IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
                      Delay(10);
                      IAP_EraseSector(IAP_ADDRESS_SEC2); //²Á³ýÉÈÇø2
                      Delay(10);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1,0x55);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1+1,0xAA);
              
                      IAP_ProgramByte(IAP_ADDRESS_SEC1+2,0x0A);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1+3,0x3E);
                      Delay(10);
                      SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+2));
                      SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+3));
                      SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+2));
                      SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+3));
              
              #endif
 143   1      
 144   1      
 145   1              if((IAP_ReadByte(IAP_ADDRESS_SEC1)!= 0x55) || (IAP_ReadByte(IAP_ADDRESS_SEC1+1) != 0xAA))         //Èç¹û²»ÊÇÓÐÐ
             -§µÄ£¬ÄÇÃ´¾Í²Á³ýEEPROMÉÏËùÓÐµÄÊý¾Ý£¬ÒÔ·ÀµÁÇÔ
 146   1              {
 147   2                      IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
 148   2                      IAP_EraseSector(IAP_ADDRESS_SEC2); //²Á³ýÉÈÇø2
 149   2                      Boot_Flag = 0;          
 150   2              }
 151   1              else //ÊÇÓÐÐ§µÄÆô¶¯±êÖ¾
 152   1              {
 153   2                      Boot_Flag = 1;
 154   2              }
 155   1      }
 156          
 157          
 158          
 159          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    215    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
