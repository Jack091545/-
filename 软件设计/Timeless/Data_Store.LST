C51 COMPILER V9.00   DATA_STORE                                                            05/02/2016 02:09:32 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DATA_STORE
OBJECT MODULE PLACED IN Data_Store.OBJ
COMPILER INVOKED BY: C:\D\software\KEILC51\C51\BIN\C51.EXE Data_Store.c LARGE BROWSE DEFINE(__WEI__) DEBUG OBJECTEXTEND

line level    source

   1          #include "stc12c5a60s2.h"
   2          #include "Data_Store.h"
   3          #include "UART.h"
   4          #include <intrins.h>
   5          #include <stdio.h>
   6          
   7          
   8          #define CMD_IDLE 0
   9          #define CMD_READ 1
  10          #define CMD_PROGRAM 2
  11          #define CMD_ERASE 3
  12          
  13          #define ENABLE_IAP 0x83
  14          
  15          #define IAP_ADDRESS_SEC1 0x0000
  16          #define IAP_ADDRESS_SEC2 0x0200
  17          
  18          struct Private_Data
  19          {
  20                  unsigned char Account[20];
  21                  unsigned char Passwd[20]; 
  22          };
  23          
  24          static unsigned char Boot_Flag = 0;
  25          
  26          
  27          void Delay(unsigned char n)
  28          {
  29   1              unsigned int x;
  30   1              while(n--)
  31   1              {
  32   2                      x = 0;
  33   2                      while(++x);
  34   2              }
  35   1      }
  36          
  37          void IAP_Idle(void)
  38          {
  39   1              IAP_CONTR = 0;
  40   1              IAP_CMD = 0;
  41   1              IAP_TRIG = 0;
  42   1              IAP_ADDRH = 0x80;
  43   1              IAP_ADDRL = 0x00;
  44   1      }
  45          
  46          unsigned char IAP_ReadByte(unsigned int addr)
  47          {
  48   1              unsigned char dat;
  49   1      
  50   1              IAP_CONTR = ENABLE_IAP;
  51   1              IAP_CMD = CMD_READ;
  52   1              IAP_ADDRL = addr;
  53   1              IAP_ADDRH = addr >> 8;
  54   1              IAP_TRIG = 0x5A;
  55   1              IAP_TRIG = 0XA5;
C51 COMPILER V9.00   DATA_STORE                                                            05/02/2016 02:09:32 PAGE 2   

  56   1              _nop_();
  57   1      
  58   1              dat = IAP_DATA;
  59   1              IAP_Idle();
  60   1      
  61   1              return dat;
  62   1      }
  63          
  64          
  65          void IAP_ProgramByte(unsigned int addr,unsigned char dat)
  66          {
  67   1              IAP_CONTR = ENABLE_IAP;
  68   1              IAP_CMD = CMD_PROGRAM;
  69   1              IAP_ADDRL = addr;
  70   1              IAP_ADDRH = addr >> 8;
  71   1              IAP_DATA = dat;
  72   1              IAP_TRIG = 0x5A;
  73   1              IAP_TRIG = 0XA5;
  74   1              _nop_();
  75   1      
  76   1      
  77   1              IAP_Idle();     
  78   1      }
  79          
  80          void IAP_EraseSector(unsigned int addr)
  81          {
  82   1              IAP_CONTR = ENABLE_IAP;
  83   1              IAP_CMD = CMD_ERASE;
  84   1              IAP_ADDRL = addr;
  85   1              IAP_ADDRH = addr >> 8;
  86   1              IAP_TRIG = 0x5A;
  87   1              IAP_TRIG = 0XA5;
  88   1              _nop_();
  89   1      
  90   1              IAP_Idle();             
  91   1      }
  92          
  93          
  94          unsigned char Get_Boot_Flag(void)
  95          {
  96   1              return Boot_Flag;
  97   1      }
  98          
  99          unsigned int Get_Timeless(void)
 100          {
 101   1      
 102   1              return (IAP_ReadByte(IAP_ADDRESS_SEC1+2)<<8)|(IAP_ReadByte(IAP_ADDRESS_SEC1+3)) ;
 103   1      }
 104          
 105          void Set_Timeless(unsigned int data_Time)
 106          {
 107   1              IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
 108   1              Delay(10);
 109   1      
 110   1              IAP_ProgramByte(IAP_ADDRESS_SEC1,0x55);
 111   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+1,0xAA);
 112   1      
 113   1      
 114   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+2,data_Time>>8);
 115   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+3,(data_Time&0x00ff));         
 116   1      }
 117          
C51 COMPILER V9.00   DATA_STORE                                                            05/02/2016 02:09:32 PAGE 3   

 118          void IAP_Task(void)
 119          {
 120   1      
 121   1      #ifdef __DEBUG__
                      IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
                      Delay(10);
                      IAP_EraseSector(IAP_ADDRESS_SEC2); //²Á³ýÉÈÇø2
                      Delay(10);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1,0x55);
                      IAP_ProgramByte(IAP_ADDRESS_SEC1+1,0xAA);
                      Delay(10);
              #endif
 130   1      #ifdef __WEI__
 131   1              IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
 132   1              Delay(10);
 133   1              IAP_EraseSector(IAP_ADDRESS_SEC2); //²Á³ýÉÈÇø2
 134   1              Delay(10);
 135   1              IAP_ProgramByte(IAP_ADDRESS_SEC1,0x55);
 136   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+1,0xAA);
 137   1      
 138   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+2,0x0A);
 139   1              IAP_ProgramByte(IAP_ADDRESS_SEC1+3,0x3E);
 140   1              Delay(10);
 141   1              SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+2));
 142   1              SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+3));
 143   1              SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+2));
 144   1              SendByte_UART(IAP_ReadByte(IAP_ADDRESS_SEC1+3));
 145   1      
 146   1      #endif
 147   1      
 148   1      
 149   1              if((IAP_ReadByte(IAP_ADDRESS_SEC1)!= 0x55) || (IAP_ReadByte(IAP_ADDRESS_SEC1+1) != 0xAA))         //Èç¹û²»ÊÇÓÐÐ
             -§µÄ£¬ÄÇÃ´¾Í²Á³ýEEPROMÉÏËùÓÐµÄÊý¾Ý£¬ÒÔ·ÀµÁÇÔ
 150   1              {
 151   2                      IAP_EraseSector(IAP_ADDRESS_SEC1); //²Á³ýÉÈÇø1
 152   2                      IAP_EraseSector(IAP_ADDRESS_SEC2); //²Á³ýÉÈÇø2
 153   2                      Boot_Flag = 0;          
 154   2              }
 155   1              else //ÊÇÓÐÐ§µÄÆô¶¯±êÖ¾
 156   1              {
 157   2                      Boot_Flag = 1;
 158   2              }
 159   1      }
 160          
 161          
 162          
 163          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    284    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
